// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial interface Transitional :  AccessControlledObject, Allors.IObject
	{


		global::Allors.Extent<ObjectState> PreviousObjectStates
		{ 
			get;
			set;
		}

		void AddPreviousObjectState (ObjectState value);

		void RemovePreviousObjectState (ObjectState value);

		bool ExistPreviousObjectStates
		{
			get;
		}

		void RemovePreviousObjectStates();


		global::Allors.Extent<ObjectState> LastObjectStates
		{ 
			get;
			set;
		}

		void AddLastObjectState (ObjectState value);

		void RemoveLastObjectState (ObjectState value);

		bool ExistLastObjectStates
		{
			get;
		}

		void RemoveLastObjectStates();


		global::Allors.Extent<ObjectState> ObjectStates
		{ 
			get;
			set;
		}

		void AddObjectState (ObjectState value);

		void RemoveObjectState (ObjectState value);

		bool ExistObjectStates
		{
			get;
		}

		void RemoveObjectStates();

	}

	public partial interface TransitionalBuilder : AccessControlledObjectBuilder , global::System.IDisposable
	{	
	}

	public partial class Transitionals : global::Allors.ObjectsBase<Transitional>
	{
		public Transitionals(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaTransitional Meta
		{
			get
			{
				return Allors.Meta.MetaTransitional.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}