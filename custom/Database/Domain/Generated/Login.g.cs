// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class Login : Allors.IObject , Deletable
	{
		private readonly IStrategy strategy;

		public Login(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaLogin Meta
		{
			get
			{
				return Allors.Meta.MetaLogin.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static Login Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Login) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::System.String Key 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Key.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Key.RelationType, value);
			}
		}

		virtual public bool ExistKey{
			get
			{
				return Strategy.ExistUnitRole(Meta.Key.RelationType);
			}
		}

		virtual public void RemoveKey()
		{
			Strategy.RemoveUnitRole(Meta.Key.RelationType);
		}


		virtual public global::System.String Provider 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Provider.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Provider.RelationType, value);
			}
		}

		virtual public bool ExistProvider{
			get
			{
				return Strategy.ExistUnitRole(Meta.Provider.RelationType);
			}
		}

		virtual public void RemoveProvider()
		{
			Strategy.RemoveUnitRole(Meta.Provider.RelationType);
		}


		virtual public User User
		{ 
			get
			{
				return (User) Strategy.GetCompositeRole(Meta.User.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.User.RelationType, value);
			}
		}

		virtual public bool ExistUser
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.User.RelationType);
			}
		}

		virtual public void RemoveUser()
		{
			Strategy.RemoveCompositeRole(Meta.User.RelationType);
		}



		public DeletableDelete Delete()
		{ 
			var method = new LoginDelete(this);
            method.Execute();
            return method;
		}

		public DeletableDelete Delete(System.Action<DeletableDelete> action)
		{ 
			var method = new LoginDelete(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild()
		{ 
			var method = new LoginOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new LoginOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new LoginOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new LoginOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new LoginOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new LoginOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new LoginOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new LoginOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new LoginOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new LoginOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class LoginBuilder : Allors.ObjectBuilder<Login> , DeletableBuilder, global::System.IDisposable
	{		
		public LoginBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(Login instance)
		{

			instance.Key = this.Key;
		
		

			instance.Provider = this.Provider;
		
		

			instance.User = this.User;

		
		}


				public global::System.String Key {get; set;}

				/// <exclude/>
				public LoginBuilder WithKey(global::System.String value)
		        {
				    if(this.Key!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Key = value;
		            return this;
		        }	

				public global::System.String Provider {get; set;}

				/// <exclude/>
				public LoginBuilder WithProvider(global::System.String value)
		        {
				    if(this.Provider!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Provider = value;
		            return this;
		        }	

				public User User {get; set;}

				/// <exclude/>
				public LoginBuilder WithUser(User value)
		        {
		            if(this.User!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.User = value;
		            return this;
		        }		

				

	}

	public partial class Logins : global::Allors.ObjectsBase<Login>
	{
		public Logins(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaLogin Meta
		{
			get
			{
				return Allors.Meta.MetaLogin.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}