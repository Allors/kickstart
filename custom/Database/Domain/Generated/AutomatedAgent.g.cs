// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class AutomatedAgent : Allors.IObject , User
	{
		private readonly IStrategy strategy;

		public AutomatedAgent(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaAutomatedAgent Meta
		{
			get
			{
				return Allors.Meta.MetaAutomatedAgent.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static AutomatedAgent Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (AutomatedAgent) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::System.String Name 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Name.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Name.RelationType, value);
			}
		}

		virtual public bool ExistName{
			get
			{
				return Strategy.ExistUnitRole(Meta.Name.RelationType);
			}
		}

		virtual public void RemoveName()
		{
			Strategy.RemoveUnitRole(Meta.Name.RelationType);
		}


		virtual public global::System.String Description 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Description.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Description.RelationType, value);
			}
		}

		virtual public bool ExistDescription{
			get
			{
				return Strategy.ExistUnitRole(Meta.Description.RelationType);
			}
		}

		virtual public void RemoveDescription()
		{
			Strategy.RemoveUnitRole(Meta.Description.RelationType);
		}


		virtual public global::System.String UserName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.UserName.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UserName.RelationType, value);
			}
		}

		virtual public bool ExistUserName{
			get
			{
				return Strategy.ExistUnitRole(Meta.UserName.RelationType);
			}
		}

		virtual public void RemoveUserName()
		{
			Strategy.RemoveUnitRole(Meta.UserName.RelationType);
		}


		virtual public global::System.String NormalizedUserName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.NormalizedUserName.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.NormalizedUserName.RelationType, value);
			}
		}

		virtual public bool ExistNormalizedUserName{
			get
			{
				return Strategy.ExistUnitRole(Meta.NormalizedUserName.RelationType);
			}
		}

		virtual public void RemoveNormalizedUserName()
		{
			Strategy.RemoveUnitRole(Meta.NormalizedUserName.RelationType);
		}


		virtual public global::System.String UserPasswordHash 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.UserPasswordHash.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UserPasswordHash.RelationType, value);
			}
		}

		virtual public bool ExistUserPasswordHash{
			get
			{
				return Strategy.ExistUnitRole(Meta.UserPasswordHash.RelationType);
			}
		}

		virtual public void RemoveUserPasswordHash()
		{
			Strategy.RemoveUnitRole(Meta.UserPasswordHash.RelationType);
		}


		virtual public global::System.String UserEmail 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.UserEmail.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UserEmail.RelationType, value);
			}
		}

		virtual public bool ExistUserEmail{
			get
			{
				return Strategy.ExistUnitRole(Meta.UserEmail.RelationType);
			}
		}

		virtual public void RemoveUserEmail()
		{
			Strategy.RemoveUnitRole(Meta.UserEmail.RelationType);
		}


		virtual public global::System.Boolean? UserEmailConfirmed 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.UserEmailConfirmed.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UserEmailConfirmed.RelationType, value);
			}
		}

		virtual public bool ExistUserEmailConfirmed{
			get
			{
				return Strategy.ExistUnitRole(Meta.UserEmailConfirmed.RelationType);
			}
		}

		virtual public void RemoveUserEmailConfirmed()
		{
			Strategy.RemoveUnitRole(Meta.UserEmailConfirmed.RelationType);
		}


		virtual public TaskList TaskList
		{ 
			get
			{
				return (TaskList) Strategy.GetCompositeRole(Meta.TaskList.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.TaskList.RelationType, value);
			}
		}

		virtual public bool ExistTaskList
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.TaskList.RelationType);
			}
		}

		virtual public void RemoveTaskList()
		{
			Strategy.RemoveCompositeRole(Meta.TaskList.RelationType);
		}


		virtual public NotificationList NotificationList
		{ 
			get
			{
				return (NotificationList) Strategy.GetCompositeRole(Meta.NotificationList.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.NotificationList.RelationType, value);
			}
		}

		virtual public bool ExistNotificationList
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.NotificationList.RelationType);
			}
		}

		virtual public void RemoveNotificationList()
		{
			Strategy.RemoveCompositeRole(Meta.NotificationList.RelationType);
		}


		virtual public SecurityToken OwnerSecurityToken
		{ 
			get
			{
				return (SecurityToken) Strategy.GetCompositeRole(Meta.OwnerSecurityToken.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.OwnerSecurityToken.RelationType, value);
			}
		}

		virtual public bool ExistOwnerSecurityToken
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.OwnerSecurityToken.RelationType);
			}
		}

		virtual public void RemoveOwnerSecurityToken()
		{
			Strategy.RemoveCompositeRole(Meta.OwnerSecurityToken.RelationType);
		}


		virtual public AccessControl OwnerAccessControl
		{ 
			get
			{
				return (AccessControl) Strategy.GetCompositeRole(Meta.OwnerAccessControl.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.OwnerAccessControl.RelationType, value);
			}
		}

		virtual public bool ExistOwnerAccessControl
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.OwnerAccessControl.RelationType);
			}
		}

		virtual public void RemoveOwnerAccessControl()
		{
			Strategy.RemoveCompositeRole(Meta.OwnerAccessControl.RelationType);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermissions.RelationType, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermissions.RelationType, value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermissions.RelationType);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermissions.RelationType);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityTokens.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityTokens.RelationType, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityTokens.RelationType, value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityTokens.RelationType);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityTokens.RelationType);
		}



		virtual public Singleton SingletonWhereGuest
		{ 
			get
			{
				return (Singleton) Strategy.GetCompositeAssociation(Meta.SingletonWhereGuest.RelationType);
			}
		} 

		virtual public bool ExistSingletonWhereGuest
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.SingletonWhereGuest.RelationType);
			}
		}


		virtual public global::Allors.Extent<AccessControl> AccessControlsWhereSubject
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.AccessControlsWhereSubject.RelationType);
			}
		}

		virtual public bool ExistAccessControlsWhereSubject
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.AccessControlsWhereSubject.RelationType);
			}
		}


		virtual public global::Allors.Extent<AccessControl> AccessControlsWhereEffectiveUser
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.AccessControlsWhereEffectiveUser.RelationType);
			}
		}

		virtual public bool ExistAccessControlsWhereEffectiveUser
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.AccessControlsWhereEffectiveUser.RelationType);
			}
		}


		virtual public global::Allors.Extent<Login> LoginsWhereUser
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.LoginsWhereUser.RelationType);
			}
		}

		virtual public bool ExistLoginsWhereUser
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.LoginsWhereUser.RelationType);
			}
		}


		virtual public global::Allors.Extent<EmailMessage> EmailMessagesWhereSender
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.EmailMessagesWhereSender.RelationType);
			}
		}

		virtual public bool ExistEmailMessagesWhereSender
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.EmailMessagesWhereSender.RelationType);
			}
		}


		virtual public global::Allors.Extent<EmailMessage> EmailMessagesWhereRecipient
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.EmailMessagesWhereRecipient.RelationType);
			}
		}

		virtual public bool ExistEmailMessagesWhereRecipient
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.EmailMessagesWhereRecipient.RelationType);
			}
		}


		virtual public global::Allors.Extent<TaskAssignment> TaskAssignmentsWhereUser
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.TaskAssignmentsWhereUser.RelationType);
			}
		}

		virtual public bool ExistTaskAssignmentsWhereUser
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.TaskAssignmentsWhereUser.RelationType);
			}
		}


		virtual public global::Allors.Extent<UserGroup> UserGroupsWhereMember
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.UserGroupsWhereMember.RelationType);
			}
		}

		virtual public bool ExistUserGroupsWhereMember
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.UserGroupsWhereMember.RelationType);
			}
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new AutomatedAgentOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new AutomatedAgentOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new AutomatedAgentOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new AutomatedAgentOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new AutomatedAgentOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new AutomatedAgentOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new AutomatedAgentOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new AutomatedAgentOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new AutomatedAgentOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new AutomatedAgentOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class AutomatedAgentBuilder : Allors.ObjectBuilder<AutomatedAgent> , UserBuilder, global::System.IDisposable
	{		
		public AutomatedAgentBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(AutomatedAgent instance)
		{

			instance.Name = this.Name;
		
		

			instance.Description = this.Description;
		
		

			instance.UserName = this.UserName;
		
		

			instance.NormalizedUserName = this.NormalizedUserName;
		
		

			instance.UserPasswordHash = this.UserPasswordHash;
		
		

			instance.UserEmail = this.UserEmail;
		
		
			

			if(this.UserEmailConfirmed.HasValue)
			{
				instance.UserEmailConfirmed = this.UserEmailConfirmed.Value;
			}			
		
		
		

			instance.NotificationList = this.NotificationList;

						
			if(this.DeniedPermissions!=null)
			{
				instance.DeniedPermissions = this.DeniedPermissions.ToArray();
			}
		
			if(this.SecurityTokens!=null)
			{
				instance.SecurityTokens = this.SecurityTokens.ToArray();
			}
		
		}


				public global::System.String Name {get; set;}

				/// <exclude/>
				public AutomatedAgentBuilder WithName(global::System.String value)
		        {
				    if(this.Name!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Name = value;
		            return this;
		        }	

				public global::System.String Description {get; set;}

				/// <exclude/>
				public AutomatedAgentBuilder WithDescription(global::System.String value)
		        {
				    if(this.Description!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Description = value;
		            return this;
		        }	

				public global::System.String UserName {get; set;}

				/// <exclude/>
				public AutomatedAgentBuilder WithUserName(global::System.String value)
		        {
				    if(this.UserName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UserName = value;
		            return this;
		        }	

				public global::System.String NormalizedUserName {get; set;}

				/// <exclude/>
				public AutomatedAgentBuilder WithNormalizedUserName(global::System.String value)
		        {
				    if(this.NormalizedUserName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.NormalizedUserName = value;
		            return this;
		        }	

				public global::System.String UserPasswordHash {get; set;}

				/// <exclude/>
				public AutomatedAgentBuilder WithUserPasswordHash(global::System.String value)
		        {
				    if(this.UserPasswordHash!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UserPasswordHash = value;
		            return this;
		        }	

				public global::System.String UserEmail {get; set;}

				/// <exclude/>
				public AutomatedAgentBuilder WithUserEmail(global::System.String value)
		        {
				    if(this.UserEmail!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UserEmail = value;
		            return this;
		        }	

				public global::System.Boolean? UserEmailConfirmed {get; set;}

				/// <exclude/>
				public AutomatedAgentBuilder WithUserEmailConfirmed(global::System.Boolean? value)
		        {
				    if(this.UserEmailConfirmed!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UserEmailConfirmed = value;
		            return this;
		        }	

				public NotificationList NotificationList {get; set;}

				/// <exclude/>
				public AutomatedAgentBuilder WithNotificationList(NotificationList value)
		        {
		            if(this.NotificationList!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.NotificationList = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public AutomatedAgentBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public AutomatedAgentBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class AutomatedAgents : global::Allors.ObjectsBase<AutomatedAgent>
	{
		public AutomatedAgents(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaAutomatedAgent Meta
		{
			get
			{
				return Allors.Meta.MetaAutomatedAgent.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}