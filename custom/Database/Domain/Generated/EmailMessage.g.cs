// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class EmailMessage : Allors.IObject , Object
	{
		private readonly IStrategy strategy;

		public EmailMessage(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaEmailMessage Meta
		{
			get
			{
				return Allors.Meta.MetaEmailMessage.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static EmailMessage Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (EmailMessage) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::System.DateTime DateCreated 
		{
			get
			{
				return (global::System.DateTime) Strategy.GetUnitRole(Meta.DateCreated.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DateCreated.RelationType, value);
			}
		}

		virtual public bool ExistDateCreated{
			get
			{
				return Strategy.ExistUnitRole(Meta.DateCreated.RelationType);
			}
		}

		virtual public void RemoveDateCreated()
		{
			Strategy.RemoveUnitRole(Meta.DateCreated.RelationType);
		}


		virtual public global::System.DateTime? DateSending 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.DateSending.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DateSending.RelationType, value);
			}
		}

		virtual public bool ExistDateSending{
			get
			{
				return Strategy.ExistUnitRole(Meta.DateSending.RelationType);
			}
		}

		virtual public void RemoveDateSending()
		{
			Strategy.RemoveUnitRole(Meta.DateSending.RelationType);
		}


		virtual public global::System.DateTime? DateSent 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.DateSent.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DateSent.RelationType, value);
			}
		}

		virtual public bool ExistDateSent{
			get
			{
				return Strategy.ExistUnitRole(Meta.DateSent.RelationType);
			}
		}

		virtual public void RemoveDateSent()
		{
			Strategy.RemoveUnitRole(Meta.DateSent.RelationType);
		}


		virtual public User Sender
		{ 
			get
			{
				return (User) Strategy.GetCompositeRole(Meta.Sender.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Sender.RelationType, value);
			}
		}

		virtual public bool ExistSender
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Sender.RelationType);
			}
		}

		virtual public void RemoveSender()
		{
			Strategy.RemoveCompositeRole(Meta.Sender.RelationType);
		}


		virtual public global::Allors.Extent<User> Recipients
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Recipients.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Recipients.RelationType, value);
			}
		}

		virtual public void AddRecipient (User value)
		{
			Strategy.AddCompositeRole(Meta.Recipients.RelationType, value);
		}

		virtual public void RemoveRecipient (User value)
		{
			Strategy.RemoveCompositeRole(Meta.Recipients.RelationType, value);
		}

		virtual public bool ExistRecipients
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Recipients.RelationType);
			}
		}

		virtual public void RemoveRecipients()
		{
			Strategy.RemoveCompositeRoles(Meta.Recipients.RelationType);
		}


		virtual public global::System.String RecipientEmailAddress 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.RecipientEmailAddress.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.RecipientEmailAddress.RelationType, value);
			}
		}

		virtual public bool ExistRecipientEmailAddress{
			get
			{
				return Strategy.ExistUnitRole(Meta.RecipientEmailAddress.RelationType);
			}
		}

		virtual public void RemoveRecipientEmailAddress()
		{
			Strategy.RemoveUnitRole(Meta.RecipientEmailAddress.RelationType);
		}


		virtual public global::System.String Subject 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Subject.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Subject.RelationType, value);
			}
		}

		virtual public bool ExistSubject{
			get
			{
				return Strategy.ExistUnitRole(Meta.Subject.RelationType);
			}
		}

		virtual public void RemoveSubject()
		{
			Strategy.RemoveUnitRole(Meta.Subject.RelationType);
		}


		virtual public global::System.String Body 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Body.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Body.RelationType, value);
			}
		}

		virtual public bool ExistBody{
			get
			{
				return Strategy.ExistUnitRole(Meta.Body.RelationType);
			}
		}

		virtual public void RemoveBody()
		{
			Strategy.RemoveUnitRole(Meta.Body.RelationType);
		}



		public ObjectOnBuild OnBuild()
		{ 
			var method = new EmailMessageOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new EmailMessageOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new EmailMessageOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new EmailMessageOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new EmailMessageOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new EmailMessageOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new EmailMessageOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new EmailMessageOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new EmailMessageOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new EmailMessageOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class EmailMessageBuilder : Allors.ObjectBuilder<EmailMessage> , ObjectBuilder, global::System.IDisposable
	{		
		public EmailMessageBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(EmailMessage instance)
		{
		
			

			if(this.DateSending.HasValue)
			{
				instance.DateSending = this.DateSending.Value;
			}			
		
		
			

			if(this.DateSent.HasValue)
			{
				instance.DateSent = this.DateSent.Value;
			}			
		
		

			instance.RecipientEmailAddress = this.RecipientEmailAddress;
		
		

			instance.Subject = this.Subject;
		
		

			instance.Body = this.Body;
		
		

			instance.Sender = this.Sender;

		
			if(this.Recipients!=null)
			{
				instance.Recipients = this.Recipients.ToArray();
			}
		
		}


				public global::System.DateTime? DateSending {get; set;}

				/// <exclude/>
				public EmailMessageBuilder WithDateSending(global::System.DateTime? value)
		        {
				    if(this.DateSending!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DateSending = value;
		            return this;
		        }	

				public global::System.DateTime? DateSent {get; set;}

				/// <exclude/>
				public EmailMessageBuilder WithDateSent(global::System.DateTime? value)
		        {
				    if(this.DateSent!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DateSent = value;
		            return this;
		        }	

				public User Sender {get; set;}

				/// <exclude/>
				public EmailMessageBuilder WithSender(User value)
		        {
		            if(this.Sender!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Sender = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<User> Recipients {get; set;}	

				/// <exclude/>
				public EmailMessageBuilder WithRecipient(User value)
		        {
					if(this.Recipients == null)
					{
						this.Recipients = new global::System.Collections.Generic.List<User>(); 
					}
		            this.Recipients.Add(value);
		            return this;
		        }		

				
				public global::System.String RecipientEmailAddress {get; set;}

				/// <exclude/>
				public EmailMessageBuilder WithRecipientEmailAddress(global::System.String value)
		        {
				    if(this.RecipientEmailAddress!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.RecipientEmailAddress = value;
		            return this;
		        }	

				public global::System.String Subject {get; set;}

				/// <exclude/>
				public EmailMessageBuilder WithSubject(global::System.String value)
		        {
				    if(this.Subject!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Subject = value;
		            return this;
		        }	

				public global::System.String Body {get; set;}

				/// <exclude/>
				public EmailMessageBuilder WithBody(global::System.String value)
		        {
				    if(this.Body!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Body = value;
		            return this;
		        }	


	}

	public partial class EmailMessages : global::Allors.ObjectsBase<EmailMessage>
	{
		public EmailMessages(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaEmailMessage Meta
		{
			get
			{
				return Allors.Meta.MetaEmailMessage.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}