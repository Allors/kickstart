// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public abstract partial class DeletableDelete : Allors.Meta.Method
	{
		protected DeletableDelete(Deletable @object) : base(@object)
		{
		}
	}

	public partial class EmploymentDelete : DeletableDelete
	{
	    private static readonly Allors.Meta.MethodInvocation EmploymentDeleteMethodInvocation = new Allors.Meta.MethodInvocation(Allors.Meta.M.Employment.ObjectType, Allors.Meta.M.Employment.Delete); 

		public EmploymentDelete(Deletable @object) : base(@object)
		{
		}

		public override Allors.Meta.MethodInvocation MethodInvocation
		{
			get
			{
				return EmploymentDeleteMethodInvocation;
			}
		}
	}public partial class OrganisationDelete : DeletableDelete
	{
	    private static readonly Allors.Meta.MethodInvocation OrganisationDeleteMethodInvocation = new Allors.Meta.MethodInvocation(Allors.Meta.M.Organisation.ObjectType, Allors.Meta.M.Organisation.Delete); 

		public OrganisationDelete(Deletable @object) : base(@object)
		{
		}

		public override Allors.Meta.MethodInvocation MethodInvocation
		{
			get
			{
				return OrganisationDeleteMethodInvocation;
			}
		}
	}public partial class PersonDelete : DeletableDelete
	{
	    private static readonly Allors.Meta.MethodInvocation PersonDeleteMethodInvocation = new Allors.Meta.MethodInvocation(Allors.Meta.M.Person.ObjectType, Allors.Meta.M.Person.Delete); 

		public PersonDelete(Deletable @object) : base(@object)
		{
		}

		public override Allors.Meta.MethodInvocation MethodInvocation
		{
			get
			{
				return PersonDeleteMethodInvocation;
			}
		}
	}public partial class MediaDelete : DeletableDelete
	{
	    private static readonly Allors.Meta.MethodInvocation MediaDeleteMethodInvocation = new Allors.Meta.MethodInvocation(Allors.Meta.M.Media.ObjectType, Allors.Meta.M.Media.Delete); 

		public MediaDelete(Deletable @object) : base(@object)
		{
		}

		public override Allors.Meta.MethodInvocation MethodInvocation
		{
			get
			{
				return MediaDeleteMethodInvocation;
			}
		}
	}public partial class MediaContentDelete : DeletableDelete
	{
	    private static readonly Allors.Meta.MethodInvocation MediaContentDeleteMethodInvocation = new Allors.Meta.MethodInvocation(Allors.Meta.M.MediaContent.ObjectType, Allors.Meta.M.MediaContent.Delete); 

		public MediaContentDelete(Deletable @object) : base(@object)
		{
		}

		public override Allors.Meta.MethodInvocation MethodInvocation
		{
			get
			{
				return MediaContentDeleteMethodInvocation;
			}
		}
	}public partial class TemplateDelete : DeletableDelete
	{
	    private static readonly Allors.Meta.MethodInvocation TemplateDeleteMethodInvocation = new Allors.Meta.MethodInvocation(Allors.Meta.M.Template.ObjectType, Allors.Meta.M.Template.Delete); 

		public TemplateDelete(Deletable @object) : base(@object)
		{
		}

		public override Allors.Meta.MethodInvocation MethodInvocation
		{
			get
			{
				return TemplateDeleteMethodInvocation;
			}
		}
	}public partial class TemplateTypeDelete : DeletableDelete
	{
	    private static readonly Allors.Meta.MethodInvocation TemplateTypeDeleteMethodInvocation = new Allors.Meta.MethodInvocation(Allors.Meta.M.TemplateType.ObjectType, Allors.Meta.M.TemplateType.Delete); 

		public TemplateTypeDelete(Deletable @object) : base(@object)
		{
		}

		public override Allors.Meta.MethodInvocation MethodInvocation
		{
			get
			{
				return TemplateTypeDeleteMethodInvocation;
			}
		}
	}public partial class PreparedExtentDelete : DeletableDelete
	{
	    private static readonly Allors.Meta.MethodInvocation PreparedExtentDeleteMethodInvocation = new Allors.Meta.MethodInvocation(Allors.Meta.M.PreparedExtent.ObjectType, Allors.Meta.M.PreparedExtent.Delete); 

		public PreparedExtentDelete(Deletable @object) : base(@object)
		{
		}

		public override Allors.Meta.MethodInvocation MethodInvocation
		{
			get
			{
				return PreparedExtentDeleteMethodInvocation;
			}
		}
	}public partial class PreparedFetchDelete : DeletableDelete
	{
	    private static readonly Allors.Meta.MethodInvocation PreparedFetchDeleteMethodInvocation = new Allors.Meta.MethodInvocation(Allors.Meta.M.PreparedFetch.ObjectType, Allors.Meta.M.PreparedFetch.Delete); 

		public PreparedFetchDelete(Deletable @object) : base(@object)
		{
		}

		public override Allors.Meta.MethodInvocation MethodInvocation
		{
			get
			{
				return PreparedFetchDeleteMethodInvocation;
			}
		}
	}public partial class LocalisedTextDelete : DeletableDelete
	{
	    private static readonly Allors.Meta.MethodInvocation LocalisedTextDeleteMethodInvocation = new Allors.Meta.MethodInvocation(Allors.Meta.M.LocalisedText.ObjectType, Allors.Meta.M.LocalisedText.Delete); 

		public LocalisedTextDelete(Deletable @object) : base(@object)
		{
		}

		public override Allors.Meta.MethodInvocation MethodInvocation
		{
			get
			{
				return LocalisedTextDeleteMethodInvocation;
			}
		}
	}public partial class AccessControlDelete : DeletableDelete
	{
	    private static readonly Allors.Meta.MethodInvocation AccessControlDeleteMethodInvocation = new Allors.Meta.MethodInvocation(Allors.Meta.M.AccessControl.ObjectType, Allors.Meta.M.AccessControl.Delete); 

		public AccessControlDelete(Deletable @object) : base(@object)
		{
		}

		public override Allors.Meta.MethodInvocation MethodInvocation
		{
			get
			{
				return AccessControlDeleteMethodInvocation;
			}
		}
	}public partial class LoginDelete : DeletableDelete
	{
	    private static readonly Allors.Meta.MethodInvocation LoginDeleteMethodInvocation = new Allors.Meta.MethodInvocation(Allors.Meta.M.Login.ObjectType, Allors.Meta.M.Login.Delete); 

		public LoginDelete(Deletable @object) : base(@object)
		{
		}

		public override Allors.Meta.MethodInvocation MethodInvocation
		{
			get
			{
				return LoginDeleteMethodInvocation;
			}
		}
	}public partial class PermissionDelete : DeletableDelete
	{
	    private static readonly Allors.Meta.MethodInvocation PermissionDeleteMethodInvocation = new Allors.Meta.MethodInvocation(Allors.Meta.M.Permission.ObjectType, Allors.Meta.M.Permission.Delete); 

		public PermissionDelete(Deletable @object) : base(@object)
		{
		}

		public override Allors.Meta.MethodInvocation MethodInvocation
		{
			get
			{
				return PermissionDeleteMethodInvocation;
			}
		}
	}public partial class SecurityTokenDelete : DeletableDelete
	{
	    private static readonly Allors.Meta.MethodInvocation SecurityTokenDeleteMethodInvocation = new Allors.Meta.MethodInvocation(Allors.Meta.M.SecurityToken.ObjectType, Allors.Meta.M.SecurityToken.Delete); 

		public SecurityTokenDelete(Deletable @object) : base(@object)
		{
		}

		public override Allors.Meta.MethodInvocation MethodInvocation
		{
			get
			{
				return SecurityTokenDeleteMethodInvocation;
			}
		}
	}public partial class NotificationListDelete : DeletableDelete
	{
	    private static readonly Allors.Meta.MethodInvocation NotificationListDeleteMethodInvocation = new Allors.Meta.MethodInvocation(Allors.Meta.M.NotificationList.ObjectType, Allors.Meta.M.NotificationList.Delete); 

		public NotificationListDelete(Deletable @object) : base(@object)
		{
		}

		public override Allors.Meta.MethodInvocation MethodInvocation
		{
			get
			{
				return NotificationListDeleteMethodInvocation;
			}
		}
	}public partial class TaskAssignmentDelete : DeletableDelete
	{
	    private static readonly Allors.Meta.MethodInvocation TaskAssignmentDeleteMethodInvocation = new Allors.Meta.MethodInvocation(Allors.Meta.M.TaskAssignment.ObjectType, Allors.Meta.M.TaskAssignment.Delete); 

		public TaskAssignmentDelete(Deletable @object) : base(@object)
		{
		}

		public override Allors.Meta.MethodInvocation MethodInvocation
		{
			get
			{
				return TaskAssignmentDeleteMethodInvocation;
			}
		}
	}public partial class TaskListDelete : DeletableDelete
	{
	    private static readonly Allors.Meta.MethodInvocation TaskListDeleteMethodInvocation = new Allors.Meta.MethodInvocation(Allors.Meta.M.TaskList.ObjectType, Allors.Meta.M.TaskList.Delete); 

		public TaskListDelete(Deletable @object) : base(@object)
		{
		}

		public override Allors.Meta.MethodInvocation MethodInvocation
		{
			get
			{
				return TaskListDeleteMethodInvocation;
			}
		}
	}
}