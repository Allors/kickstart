// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class TaskList : Allors.IObject , Deletable
	{
		private readonly IStrategy strategy;

		public TaskList(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}

		public Allors.Meta.MetaTaskList Meta
		{
			get
			{
				return Allors.Meta.MetaTaskList.Instance;
			}
		}

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static TaskList Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (TaskList) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::Allors.Extent<TaskAssignment> TaskAssignments
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.TaskAssignments.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.TaskAssignments.RelationType, value);
			}
		}

		virtual public void AddTaskAssignment (TaskAssignment value)
		{
			Strategy.AddCompositeRole(Meta.TaskAssignments.RelationType, value);
		}

		virtual public void RemoveTaskAssignment (TaskAssignment value)
		{
			Strategy.RemoveCompositeRole(Meta.TaskAssignments.RelationType, value);
		}

		virtual public bool ExistTaskAssignments
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.TaskAssignments.RelationType);
			}
		}

		virtual public void RemoveTaskAssignments()
		{
			Strategy.RemoveCompositeRoles(Meta.TaskAssignments.RelationType);
		}


		virtual public global::Allors.Extent<TaskAssignment> OpenTaskAssignments
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.OpenTaskAssignments.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.OpenTaskAssignments.RelationType, value);
			}
		}

		virtual public void AddOpenTaskAssignment (TaskAssignment value)
		{
			Strategy.AddCompositeRole(Meta.OpenTaskAssignments.RelationType, value);
		}

		virtual public void RemoveOpenTaskAssignment (TaskAssignment value)
		{
			Strategy.RemoveCompositeRole(Meta.OpenTaskAssignments.RelationType, value);
		}

		virtual public bool ExistOpenTaskAssignments
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.OpenTaskAssignments.RelationType);
			}
		}

		virtual public void RemoveOpenTaskAssignments()
		{
			Strategy.RemoveCompositeRoles(Meta.OpenTaskAssignments.RelationType);
		}


		virtual public global::System.Int32? Count 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(Meta.Count.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Count.RelationType, value);
			}
		}

		virtual public bool ExistCount{
			get
			{
				return Strategy.ExistUnitRole(Meta.Count.RelationType);
			}
		}

		virtual public void RemoveCount()
		{
			Strategy.RemoveUnitRole(Meta.Count.RelationType);
		}



		virtual public User UserWhereTaskList
		{ 
			get
			{
				return (User) Strategy.GetCompositeAssociation(Meta.UserWhereTaskList.RelationType);
			}
		} 

		virtual public bool ExistUserWhereTaskList
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.UserWhereTaskList.RelationType);
			}
		}



		public DeletableDelete Delete()
		{ 
			var method = new TaskListDelete(this);
            method.Execute();
            return method;
		}

		public DeletableDelete Delete(System.Action<DeletableDelete> action)
		{ 
			var method = new TaskListDelete(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild()
		{ 
			var method = new TaskListOnBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnBuild OnBuild(System.Action<ObjectOnBuild> action)
		{ 
			var method = new TaskListOnBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild()
		{ 
			var method = new TaskListOnPostBuild(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostBuild OnPostBuild(System.Action<ObjectOnPostBuild> action)
		{ 
			var method = new TaskListOnPostBuild(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive()
		{ 
			var method = new TaskListOnPreDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPreDerive OnPreDerive(System.Action<ObjectOnPreDerive> action)
		{ 
			var method = new TaskListOnPreDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive()
		{ 
			var method = new TaskListOnDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnDerive OnDerive(System.Action<ObjectOnDerive> action)
		{ 
			var method = new TaskListOnDerive(this);
            action(method);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive()
		{ 
			var method = new TaskListOnPostDerive(this);
            method.Execute();
            return method;
		}

		public ObjectOnPostDerive OnPostDerive(System.Action<ObjectOnPostDerive> action)
		{ 
			var method = new TaskListOnPostDerive(this);
            action(method);
            method.Execute();
            return method;
		}
	}

	public partial class TaskListBuilder : Allors.ObjectBuilder<TaskList> , DeletableBuilder, global::System.IDisposable
	{		
		public TaskListBuilder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild(TaskList instance)
		{
		
				
		}


	}

	public partial class TaskLists : global::Allors.ObjectsBase<TaskList>
	{
		public TaskLists(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.MetaTaskList Meta
		{
			get
			{
				return Allors.Meta.MetaTaskList.Instance;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}