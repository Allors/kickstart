@page "/person/edit/{id}"
@attribute [Authorize]
@inject IDatabase Database
@inject Workspace Workspace
@inject NavigationManager NavigationManager

@if (person != null)
{
    <AllorsBSForm Model="@person" OnValidSubmit="@HandleValidSubmit">
        <ValidationSummary />

        <BSRow>
            <BSCol>
                <AllorsInput RoleType="@M.Person.FirstName" />
            </BSCol>
            <BSCol>
                <AllorsInput RoleType="@M.Person.MiddleName" />
            </BSCol>
            <BSCol>
                <AllorsInput RoleType="@M.Person.LastName" />
            </BSCol>
            <BSCol>
                @if (person.Address != null)
                {
                    <AllorsInput RoleType="@M.Address.City" Object="@person.Address" />
                }
                else
                {
                    <BSButton @onclick="CreateCity">Create City</BSButton>
                }
            </BSCol>
            <BSCol>
                @if (person.Calendar != null)
                {
                    <AllorsInput RoleType="@M.Calendar.ScheduleStart" Object="@person.Calendar"/>
                }
                else
                {
                    <BSButton @onclick="CreateSchedule">Create Schedule</BSButton>
                }
            </BSCol>
        </BSRow>

        <BSRow>
            <BSCol>
                <button @onclick="HandleValidSubmit">Submit</button>
            </BSCol>
        </BSRow>

    </AllorsBSForm>
}

@code {
    Context Context;

    [Parameter]
    public string id { get; set; }

    Person person;

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        this.Context = new Context(this.Database, this.Workspace);

        var pull = new Pull
        {
            ObjectId = id,
            Results = new[] {
                    new Allors.Workspace.Data.Result
                    {
                        Fetch = new Fetch
                        {
                              Include = new PersonNodeBuilder(person => {
                                  person.Address();
                                  person.Calendar();
                              })
                        }
                    }
                }
        };

        var result = await this.Context.Load(pull);

        this.person = result.GetObject<Person>();
        //Console.WriteLine(person.Calendar.ScheduleStart);
    }

    public async System.Threading.Tasks.Task HandleValidSubmit()
    {
        var response = await this.Context.Save();
        if (!response.HasErrors)
        {
            this.NavigationManager.NavigateTo("/person/list");
        }
    }

    public void CreateCity()
    {
        this.person.Address = (Address)this.Context.Session.Create(M.Address.Class);
    }

    public void CreateSchedule()
    {
        this.person.Calendar = (Calendar)this.Context.Session.Create(M.Calendar.Class);
    }
}
