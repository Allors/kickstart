// Allors generated file.
// Do not edit this file, changes will be overwritten.
// tslint:disable:no-empty-interface
// tslint:disable:no-consecutive-blank-lines

import { MetaPopulation, Fetch, Tree } from '../../framework';
import { TreeDeletable, TreeEnumeration, TreeUniquelyIdentifiable, TreeVersion, TreeLocalised, TreeObjectState, TreeTask, TreeUser, TreeWorkItem, TreeOrganisation, TreePerson, TreeSettings, TreeSingleton, TreeCounter, TreeMedia, TreeMediaContent, TreeTemplate, TreeTemplateType, TreePreparedExtent, TreePreparedFetch, TreeCountry, TreeCurrency, TreeLanguage, TreeLocale, TreeLocalisedText, TreeAccessControl, TreeLogin, TreePermission, TreeRole, TreeSecurityToken, TreeAutomatedAgent, TreeNotification, TreeNotificationList, TreeTaskAssignment, TreeTaskList, TreeUserGroup } from './tree.g';

export class FetchFactory {
    constructor(private metaPopulation: MetaPopulation) {
    }

    public Deletable(literal: FetchDeletable): Fetch {
        return new Fetch(this.metaPopulation.objectTypeByName['Deletable'], literal);
    }

    public Enumeration(literal: FetchEnumeration): Fetch {
        return new Fetch(this.metaPopulation.objectTypeByName['Enumeration'], literal);
    }

    public UniquelyIdentifiable(literal: FetchUniquelyIdentifiable): Fetch {
        return new Fetch(this.metaPopulation.objectTypeByName['UniquelyIdentifiable'], literal);
    }

    public Version(literal: FetchVersion): Fetch {
        return new Fetch(this.metaPopulation.objectTypeByName['Version'], literal);
    }

    public Localised(literal: FetchLocalised): Fetch {
        return new Fetch(this.metaPopulation.objectTypeByName['Localised'], literal);
    }

    public ObjectState(literal: FetchObjectState): Fetch {
        return new Fetch(this.metaPopulation.objectTypeByName['ObjectState'], literal);
    }

    public Task(literal: FetchTask): Fetch {
        return new Fetch(this.metaPopulation.objectTypeByName['Task'], literal);
    }

    public User(literal: FetchUser): Fetch {
        return new Fetch(this.metaPopulation.objectTypeByName['User'], literal);
    }

    public WorkItem(literal: FetchWorkItem): Fetch {
        return new Fetch(this.metaPopulation.objectTypeByName['WorkItem'], literal);
    }

    public Organisation(literal: FetchOrganisation): Fetch {
        return new Fetch(this.metaPopulation.objectTypeByName['Organisation'], literal);
    }

    public Person(literal: FetchPerson): Fetch {
        return new Fetch(this.metaPopulation.objectTypeByName['Person'], literal);
    }

    public Settings(literal: FetchSettings): Fetch {
        return new Fetch(this.metaPopulation.objectTypeByName['Settings'], literal);
    }

    public Singleton(literal: FetchSingleton): Fetch {
        return new Fetch(this.metaPopulation.objectTypeByName['Singleton'], literal);
    }

    public Counter(literal: FetchCounter): Fetch {
        return new Fetch(this.metaPopulation.objectTypeByName['Counter'], literal);
    }

    public Media(literal: FetchMedia): Fetch {
        return new Fetch(this.metaPopulation.objectTypeByName['Media'], literal);
    }

    public MediaContent(literal: FetchMediaContent): Fetch {
        return new Fetch(this.metaPopulation.objectTypeByName['MediaContent'], literal);
    }

    public Template(literal: FetchTemplate): Fetch {
        return new Fetch(this.metaPopulation.objectTypeByName['Template'], literal);
    }

    public TemplateType(literal: FetchTemplateType): Fetch {
        return new Fetch(this.metaPopulation.objectTypeByName['TemplateType'], literal);
    }

    public PreparedExtent(literal: FetchPreparedExtent): Fetch {
        return new Fetch(this.metaPopulation.objectTypeByName['PreparedExtent'], literal);
    }

    public PreparedFetch(literal: FetchPreparedFetch): Fetch {
        return new Fetch(this.metaPopulation.objectTypeByName['PreparedFetch'], literal);
    }

    public Country(literal: FetchCountry): Fetch {
        return new Fetch(this.metaPopulation.objectTypeByName['Country'], literal);
    }

    public Currency(literal: FetchCurrency): Fetch {
        return new Fetch(this.metaPopulation.objectTypeByName['Currency'], literal);
    }

    public Language(literal: FetchLanguage): Fetch {
        return new Fetch(this.metaPopulation.objectTypeByName['Language'], literal);
    }

    public Locale(literal: FetchLocale): Fetch {
        return new Fetch(this.metaPopulation.objectTypeByName['Locale'], literal);
    }

    public LocalisedText(literal: FetchLocalisedText): Fetch {
        return new Fetch(this.metaPopulation.objectTypeByName['LocalisedText'], literal);
    }

    public AccessControl(literal: FetchAccessControl): Fetch {
        return new Fetch(this.metaPopulation.objectTypeByName['AccessControl'], literal);
    }

    public Login(literal: FetchLogin): Fetch {
        return new Fetch(this.metaPopulation.objectTypeByName['Login'], literal);
    }

    public Permission(literal: FetchPermission): Fetch {
        return new Fetch(this.metaPopulation.objectTypeByName['Permission'], literal);
    }

    public Role(literal: FetchRole): Fetch {
        return new Fetch(this.metaPopulation.objectTypeByName['Role'], literal);
    }

    public SecurityToken(literal: FetchSecurityToken): Fetch {
        return new Fetch(this.metaPopulation.objectTypeByName['SecurityToken'], literal);
    }

    public AutomatedAgent(literal: FetchAutomatedAgent): Fetch {
        return new Fetch(this.metaPopulation.objectTypeByName['AutomatedAgent'], literal);
    }

    public Notification(literal: FetchNotification): Fetch {
        return new Fetch(this.metaPopulation.objectTypeByName['Notification'], literal);
    }

    public NotificationList(literal: FetchNotificationList): Fetch {
        return new Fetch(this.metaPopulation.objectTypeByName['NotificationList'], literal);
    }

    public TaskAssignment(literal: FetchTaskAssignment): Fetch {
        return new Fetch(this.metaPopulation.objectTypeByName['TaskAssignment'], literal);
    }

    public TaskList(literal: FetchTaskList): Fetch {
        return new Fetch(this.metaPopulation.objectTypeByName['TaskList'], literal);
    }

    public UserGroup(literal: FetchUserGroup): Fetch {
        return new Fetch(this.metaPopulation.objectTypeByName['UserGroup'], literal);
    }
}

export interface FetchDeletable {


   Organisation_Employees?: Fetch | FetchPerson;


   Person_Picture?: Fetch | FetchMedia;

   Person_OrganisationsWhereEmployee?: Fetch | FetchOrganisation;
   Person_TasksWhereParticipant?: Fetch | FetchTask;
   Person_TasksWherePerformer?: Fetch | FetchTask;

   Media_MediaContent?: Fetch | FetchMediaContent;

   Media_PersonWherePicture?: Fetch | FetchPerson;
   Media_SingletonsWhereLogoImage?: Fetch | FetchSingleton;


   MediaContent_MediaWhereMediaContent?: Fetch | FetchMedia;






   LocalisedText_CountryWhereLocalisedName?: Fetch | FetchCountry;
   LocalisedText_LanguageWhereLocalisedName?: Fetch | FetchLanguage;
   LocalisedText_EnumerationWhereLocalisedName?: Fetch | FetchEnumeration;





   NotificationList_UnconfirmedNotifications?: Fetch | FetchNotification;

   NotificationList_UserWhereNotificationList?: Fetch | FetchUser;

   TaskAssignment_User?: Fetch | FetchUser;
   TaskAssignment_Task?: Fetch | FetchTask;

   TaskAssignment_TaskListWhereTaskAssignment?: Fetch | FetchTaskList;
   TaskAssignment_TaskListWhereOpenTaskAssignment?: Fetch | FetchTaskList;

   TaskList_TaskAssignments?: Fetch | FetchTaskAssignment;
   TaskList_OpenTaskAssignments?: Fetch | FetchTaskAssignment;

   TaskList_UserWhereTaskList?: Fetch | FetchUser;

   Task_WorkItem?: Fetch | FetchWorkItem;
   Task_Participants?: Fetch | FetchPerson;
   Task_Performer?: Fetch | FetchPerson;

   Task_TaskAssignmentsWhereTask?: Fetch | FetchTaskAssignment;


   include?: Tree | TreeDeletable;
}

export interface FetchEnumeration {
   LocalisedNames?: Fetch | FetchLocalisedText;




   Currency_CountriesWhereCurrency?: Fetch | FetchCountry;


   include?: Tree | TreeEnumeration;
}

export interface FetchUniquelyIdentifiable {


   Person_Picture?: Fetch | FetchMedia;

   Person_OrganisationsWhereEmployee?: Fetch | FetchOrganisation;
   Person_TasksWhereParticipant?: Fetch | FetchTask;
   Person_TasksWherePerformer?: Fetch | FetchTask;


   Media_MediaContent?: Fetch | FetchMediaContent;

   Media_PersonWherePicture?: Fetch | FetchPerson;
   Media_SingletonsWhereLogoImage?: Fetch | FetchSingleton;






   Enumeration_LocalisedNames?: Fetch | FetchLocalisedText;




   Currency_CountriesWhereCurrency?: Fetch | FetchCountry;


   Task_WorkItem?: Fetch | FetchWorkItem;
   Task_Participants?: Fetch | FetchPerson;
   Task_Performer?: Fetch | FetchPerson;

   Task_TaskAssignmentsWhereTask?: Fetch | FetchTaskAssignment;


   include?: Tree | TreeUniquelyIdentifiable;
}

export interface FetchVersion {



   include?: Tree | TreeVersion;
}

export interface FetchLocalised {
   Locale?: Fetch | FetchLocale;


   Organisation_Employees?: Fetch | FetchPerson;



   LocalisedText_CountryWhereLocalisedName?: Fetch | FetchCountry;
   LocalisedText_LanguageWhereLocalisedName?: Fetch | FetchLanguage;
   LocalisedText_EnumerationWhereLocalisedName?: Fetch | FetchEnumeration;


   include?: Tree | TreeLocalised;
}

export interface FetchObjectState {



   include?: Tree | TreeObjectState;
}

export interface FetchTask {
   WorkItem?: Fetch | FetchWorkItem;
   Participants?: Fetch | FetchPerson;
   Performer?: Fetch | FetchPerson;

   TaskAssignmentsWhereTask?: Fetch | FetchTaskAssignment;


   include?: Tree | TreeTask;
}

export interface FetchUser {
   TaskList?: Fetch | FetchTaskList;
   NotificationList?: Fetch | FetchNotificationList;

   SingletonWhereGuest?: Fetch | FetchSingleton;
   TaskAssignmentsWhereUser?: Fetch | FetchTaskAssignment;

   Person_Picture?: Fetch | FetchMedia;

   Person_OrganisationsWhereEmployee?: Fetch | FetchOrganisation;
   Person_TasksWhereParticipant?: Fetch | FetchTask;
   Person_TasksWherePerformer?: Fetch | FetchTask;




   include?: Tree | TreeUser;
}

export interface FetchWorkItem {

   TasksWhereWorkItem?: Fetch | FetchTask;


   include?: Tree | TreeWorkItem;
}

export interface FetchOrganisation {
   Employees?: Fetch | FetchPerson;
   Locale?: Fetch | FetchLocale;



   include?: Tree | TreeOrganisation;
}

export interface FetchPerson {
   Picture?: Fetch | FetchMedia;
   TaskList?: Fetch | FetchTaskList;
   NotificationList?: Fetch | FetchNotificationList;

   OrganisationsWhereEmployee?: Fetch | FetchOrganisation;
   TasksWhereParticipant?: Fetch | FetchTask;
   TasksWherePerformer?: Fetch | FetchTask;
   SingletonWhereGuest?: Fetch | FetchSingleton;
   TaskAssignmentsWhereUser?: Fetch | FetchTaskAssignment;


   include?: Tree | TreePerson;
}

export interface FetchSettings {

   SingletonWhereSettings?: Fetch | FetchSingleton;


   include?: Tree | TreeSettings;
}

export interface FetchSingleton {
   Settings?: Fetch | FetchSettings;
   DefaultLocale?: Fetch | FetchLocale;
   AdditionalLocales?: Fetch | FetchLocale;
   Guest?: Fetch | FetchUser;
   LogoImage?: Fetch | FetchMedia;



   include?: Tree | TreeSingleton;
}

export interface FetchCounter {



   include?: Tree | TreeCounter;
}

export interface FetchMedia {
   MediaContent?: Fetch | FetchMediaContent;

   PersonWherePicture?: Fetch | FetchPerson;
   SingletonsWhereLogoImage?: Fetch | FetchSingleton;


   include?: Tree | TreeMedia;
}

export interface FetchMediaContent {

   MediaWhereMediaContent?: Fetch | FetchMedia;


   include?: Tree | TreeMediaContent;
}

export interface FetchTemplate {



   include?: Tree | TreeTemplate;
}

export interface FetchTemplateType {
   LocalisedNames?: Fetch | FetchLocalisedText;



   include?: Tree | TreeTemplateType;
}

export interface FetchPreparedExtent {



   include?: Tree | TreePreparedExtent;
}

export interface FetchPreparedFetch {



   include?: Tree | TreePreparedFetch;
}

export interface FetchCountry {
   Currency?: Fetch | FetchCurrency;
   LocalisedNames?: Fetch | FetchLocalisedText;

   LocalesWhereCountry?: Fetch | FetchLocale;


   include?: Tree | TreeCountry;
}

export interface FetchCurrency {
   LocalisedNames?: Fetch | FetchLocalisedText;

   CountriesWhereCurrency?: Fetch | FetchCountry;


   include?: Tree | TreeCurrency;
}

export interface FetchLanguage {
   LocalisedNames?: Fetch | FetchLocalisedText;

   LocalesWhereLanguage?: Fetch | FetchLocale;


   include?: Tree | TreeLanguage;
}

export interface FetchLocale {
   Language?: Fetch | FetchLanguage;
   Country?: Fetch | FetchCountry;

   SingletonsWhereDefaultLocale?: Fetch | FetchSingleton;
   SingletonWhereAdditionalLocale?: Fetch | FetchSingleton;
   LocalisedsWhereLocale?: Fetch | FetchLocalised;


   include?: Tree | TreeLocale;
}

export interface FetchLocalisedText {
   Locale?: Fetch | FetchLocale;

   CountryWhereLocalisedName?: Fetch | FetchCountry;
   LanguageWhereLocalisedName?: Fetch | FetchLanguage;
   EnumerationWhereLocalisedName?: Fetch | FetchEnumeration;


   include?: Tree | TreeLocalisedText;
}

export interface FetchAccessControl {



   include?: Tree | TreeAccessControl;
}

export interface FetchLogin {



   include?: Tree | TreeLogin;
}

export interface FetchPermission {



   include?: Tree | TreePermission;
}

export interface FetchRole {



   include?: Tree | TreeRole;
}

export interface FetchSecurityToken {



   include?: Tree | TreeSecurityToken;
}

export interface FetchAutomatedAgent {
   TaskList?: Fetch | FetchTaskList;
   NotificationList?: Fetch | FetchNotificationList;

   SingletonWhereGuest?: Fetch | FetchSingleton;
   TaskAssignmentsWhereUser?: Fetch | FetchTaskAssignment;


   include?: Tree | TreeAutomatedAgent;
}

export interface FetchNotification {

   NotificationListWhereUnconfirmedNotification?: Fetch | FetchNotificationList;


   include?: Tree | TreeNotification;
}

export interface FetchNotificationList {
   UnconfirmedNotifications?: Fetch | FetchNotification;

   UserWhereNotificationList?: Fetch | FetchUser;


   include?: Tree | TreeNotificationList;
}

export interface FetchTaskAssignment {
   User?: Fetch | FetchUser;
   Task?: Fetch | FetchTask;

   TaskListWhereTaskAssignment?: Fetch | FetchTaskList;
   TaskListWhereOpenTaskAssignment?: Fetch | FetchTaskList;


   include?: Tree | TreeTaskAssignment;
}

export interface FetchTaskList {
   TaskAssignments?: Fetch | FetchTaskAssignment;
   OpenTaskAssignments?: Fetch | FetchTaskAssignment;

   UserWhereTaskList?: Fetch | FetchUser;


   include?: Tree | TreeTaskList;
}

export interface FetchUserGroup {



   include?: Tree | TreeUserGroup;
}
