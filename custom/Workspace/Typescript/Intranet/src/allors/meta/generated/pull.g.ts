// Allors generated file.
// Do not edit this file, changes will be overwritten.
// tslint:disable:no-empty-interface
// tslint:disable:no-consecutive-blank-lines

import { MetaPopulation, Pull, FlatPull, Fetch, Tree } from '../../framework';

import { FetchDeletable, FetchEnumeration, FetchUniquelyIdentifiable, FetchVersion, FetchLocalised, FetchObjectState, FetchTask, FetchUser, FetchWorkItem, FetchOrganisation, FetchPerson, FetchSettings, FetchSingleton, FetchCounter, FetchMedia, FetchMediaContent, FetchTemplate, FetchTemplateType, FetchPreparedExtent, FetchPreparedFetch, FetchCountry, FetchCurrency, FetchLanguage, FetchLocale, FetchLocalisedText, FetchAccessControl, FetchLogin, FetchPermission, FetchRole, FetchSecurityToken, FetchAutomatedAgent, FetchNotification, FetchNotificationList, FetchTaskAssignment, FetchTaskList, FetchUserGroup } from './fetch.g';
import { TreeDeletable, TreeEnumeration, TreeUniquelyIdentifiable, TreeVersion, TreeLocalised, TreeObjectState, TreeTask, TreeUser, TreeWorkItem, TreeOrganisation, TreePerson, TreeSettings, TreeSingleton, TreeCounter, TreeMedia, TreeMediaContent, TreeTemplate, TreeTemplateType, TreePreparedExtent, TreePreparedFetch, TreeCountry, TreeCurrency, TreeLanguage, TreeLocale, TreeLocalisedText, TreeAccessControl, TreeLogin, TreePermission, TreeRole, TreeSecurityToken, TreeAutomatedAgent, TreeNotification, TreeNotificationList, TreeTaskAssignment, TreeTaskList, TreeUserGroup } from './tree.g';

export class PullFactory {
    constructor(private metaPopulation: MetaPopulation) {
    }

    public Deletable(literal?: PullDeletable): Pull {
        return new Pull(this.metaPopulation.objectTypeByName['Deletable'], literal);
    }

    public Enumeration(literal?: PullEnumeration): Pull {
        return new Pull(this.metaPopulation.objectTypeByName['Enumeration'], literal);
    }

    public UniquelyIdentifiable(literal?: PullUniquelyIdentifiable): Pull {
        return new Pull(this.metaPopulation.objectTypeByName['UniquelyIdentifiable'], literal);
    }

    public Version(literal?: PullVersion): Pull {
        return new Pull(this.metaPopulation.objectTypeByName['Version'], literal);
    }

    public Localised(literal?: PullLocalised): Pull {
        return new Pull(this.metaPopulation.objectTypeByName['Localised'], literal);
    }

    public ObjectState(literal?: PullObjectState): Pull {
        return new Pull(this.metaPopulation.objectTypeByName['ObjectState'], literal);
    }

    public Task(literal?: PullTask): Pull {
        return new Pull(this.metaPopulation.objectTypeByName['Task'], literal);
    }

    public User(literal?: PullUser): Pull {
        return new Pull(this.metaPopulation.objectTypeByName['User'], literal);
    }

    public WorkItem(literal?: PullWorkItem): Pull {
        return new Pull(this.metaPopulation.objectTypeByName['WorkItem'], literal);
    }

    public Organisation(literal?: PullOrganisation): Pull {
        return new Pull(this.metaPopulation.objectTypeByName['Organisation'], literal);
    }

    public Person(literal?: PullPerson): Pull {
        return new Pull(this.metaPopulation.objectTypeByName['Person'], literal);
    }

    public Settings(literal?: PullSettings): Pull {
        return new Pull(this.metaPopulation.objectTypeByName['Settings'], literal);
    }

    public Singleton(literal?: PullSingleton): Pull {
        return new Pull(this.metaPopulation.objectTypeByName['Singleton'], literal);
    }

    public Counter(literal?: PullCounter): Pull {
        return new Pull(this.metaPopulation.objectTypeByName['Counter'], literal);
    }

    public Media(literal?: PullMedia): Pull {
        return new Pull(this.metaPopulation.objectTypeByName['Media'], literal);
    }

    public MediaContent(literal?: PullMediaContent): Pull {
        return new Pull(this.metaPopulation.objectTypeByName['MediaContent'], literal);
    }

    public Template(literal?: PullTemplate): Pull {
        return new Pull(this.metaPopulation.objectTypeByName['Template'], literal);
    }

    public TemplateType(literal?: PullTemplateType): Pull {
        return new Pull(this.metaPopulation.objectTypeByName['TemplateType'], literal);
    }

    public PreparedExtent(literal?: PullPreparedExtent): Pull {
        return new Pull(this.metaPopulation.objectTypeByName['PreparedExtent'], literal);
    }

    public PreparedFetch(literal?: PullPreparedFetch): Pull {
        return new Pull(this.metaPopulation.objectTypeByName['PreparedFetch'], literal);
    }

    public Country(literal?: PullCountry): Pull {
        return new Pull(this.metaPopulation.objectTypeByName['Country'], literal);
    }

    public Currency(literal?: PullCurrency): Pull {
        return new Pull(this.metaPopulation.objectTypeByName['Currency'], literal);
    }

    public Language(literal?: PullLanguage): Pull {
        return new Pull(this.metaPopulation.objectTypeByName['Language'], literal);
    }

    public Locale(literal?: PullLocale): Pull {
        return new Pull(this.metaPopulation.objectTypeByName['Locale'], literal);
    }

    public LocalisedText(literal?: PullLocalisedText): Pull {
        return new Pull(this.metaPopulation.objectTypeByName['LocalisedText'], literal);
    }

    public AccessControl(literal?: PullAccessControl): Pull {
        return new Pull(this.metaPopulation.objectTypeByName['AccessControl'], literal);
    }

    public Login(literal?: PullLogin): Pull {
        return new Pull(this.metaPopulation.objectTypeByName['Login'], literal);
    }

    public Permission(literal?: PullPermission): Pull {
        return new Pull(this.metaPopulation.objectTypeByName['Permission'], literal);
    }

    public Role(literal?: PullRole): Pull {
        return new Pull(this.metaPopulation.objectTypeByName['Role'], literal);
    }

    public SecurityToken(literal?: PullSecurityToken): Pull {
        return new Pull(this.metaPopulation.objectTypeByName['SecurityToken'], literal);
    }

    public AutomatedAgent(literal?: PullAutomatedAgent): Pull {
        return new Pull(this.metaPopulation.objectTypeByName['AutomatedAgent'], literal);
    }

    public Notification(literal?: PullNotification): Pull {
        return new Pull(this.metaPopulation.objectTypeByName['Notification'], literal);
    }

    public NotificationList(literal?: PullNotificationList): Pull {
        return new Pull(this.metaPopulation.objectTypeByName['NotificationList'], literal);
    }

    public TaskAssignment(literal?: PullTaskAssignment): Pull {
        return new Pull(this.metaPopulation.objectTypeByName['TaskAssignment'], literal);
    }

    public TaskList(literal?: PullTaskList): Pull {
        return new Pull(this.metaPopulation.objectTypeByName['TaskList'], literal);
    }

    public UserGroup(literal?: PullUserGroup): Pull {
        return new Pull(this.metaPopulation.objectTypeByName['UserGroup'], literal);
    }
}

export interface PullDeletable extends FlatPull {
    fetch?: Fetch | FetchDeletable;

    include?: Tree | TreeDeletable;
}

export interface PullEnumeration extends FlatPull {
    fetch?: Fetch | FetchEnumeration;

    include?: Tree | TreeEnumeration;
}

export interface PullUniquelyIdentifiable extends FlatPull {
    fetch?: Fetch | FetchUniquelyIdentifiable;

    include?: Tree | TreeUniquelyIdentifiable;
}

export interface PullVersion extends FlatPull {
    fetch?: Fetch | FetchVersion;

    include?: Tree | TreeVersion;
}

export interface PullLocalised extends FlatPull {
    fetch?: Fetch | FetchLocalised;

    include?: Tree | TreeLocalised;
}

export interface PullObjectState extends FlatPull {
    fetch?: Fetch | FetchObjectState;

    include?: Tree | TreeObjectState;
}

export interface PullTask extends FlatPull {
    fetch?: Fetch | FetchTask;

    include?: Tree | TreeTask;
}

export interface PullUser extends FlatPull {
    fetch?: Fetch | FetchUser;

    include?: Tree | TreeUser;
}

export interface PullWorkItem extends FlatPull {
    fetch?: Fetch | FetchWorkItem;

    include?: Tree | TreeWorkItem;
}

export interface PullOrganisation extends FlatPull {
    fetch?: Fetch | FetchOrganisation;

    include?: Tree | TreeOrganisation;
}

export interface PullPerson extends FlatPull {
    fetch?: Fetch | FetchPerson;

    include?: Tree | TreePerson;
}

export interface PullSettings extends FlatPull {
    fetch?: Fetch | FetchSettings;

    include?: Tree | TreeSettings;
}

export interface PullSingleton extends FlatPull {
    fetch?: Fetch | FetchSingleton;

    include?: Tree | TreeSingleton;
}

export interface PullCounter extends FlatPull {
    fetch?: Fetch | FetchCounter;

    include?: Tree | TreeCounter;
}

export interface PullMedia extends FlatPull {
    fetch?: Fetch | FetchMedia;

    include?: Tree | TreeMedia;
}

export interface PullMediaContent extends FlatPull {
    fetch?: Fetch | FetchMediaContent;

    include?: Tree | TreeMediaContent;
}

export interface PullTemplate extends FlatPull {
    fetch?: Fetch | FetchTemplate;

    include?: Tree | TreeTemplate;
}

export interface PullTemplateType extends FlatPull {
    fetch?: Fetch | FetchTemplateType;

    include?: Tree | TreeTemplateType;
}

export interface PullPreparedExtent extends FlatPull {
    fetch?: Fetch | FetchPreparedExtent;

    include?: Tree | TreePreparedExtent;
}

export interface PullPreparedFetch extends FlatPull {
    fetch?: Fetch | FetchPreparedFetch;

    include?: Tree | TreePreparedFetch;
}

export interface PullCountry extends FlatPull {
    fetch?: Fetch | FetchCountry;

    include?: Tree | TreeCountry;
}

export interface PullCurrency extends FlatPull {
    fetch?: Fetch | FetchCurrency;

    include?: Tree | TreeCurrency;
}

export interface PullLanguage extends FlatPull {
    fetch?: Fetch | FetchLanguage;

    include?: Tree | TreeLanguage;
}

export interface PullLocale extends FlatPull {
    fetch?: Fetch | FetchLocale;

    include?: Tree | TreeLocale;
}

export interface PullLocalisedText extends FlatPull {
    fetch?: Fetch | FetchLocalisedText;

    include?: Tree | TreeLocalisedText;
}

export interface PullAccessControl extends FlatPull {
    fetch?: Fetch | FetchAccessControl;

    include?: Tree | TreeAccessControl;
}

export interface PullLogin extends FlatPull {
    fetch?: Fetch | FetchLogin;

    include?: Tree | TreeLogin;
}

export interface PullPermission extends FlatPull {
    fetch?: Fetch | FetchPermission;

    include?: Tree | TreePermission;
}

export interface PullRole extends FlatPull {
    fetch?: Fetch | FetchRole;

    include?: Tree | TreeRole;
}

export interface PullSecurityToken extends FlatPull {
    fetch?: Fetch | FetchSecurityToken;

    include?: Tree | TreeSecurityToken;
}

export interface PullAutomatedAgent extends FlatPull {
    fetch?: Fetch | FetchAutomatedAgent;

    include?: Tree | TreeAutomatedAgent;
}

export interface PullNotification extends FlatPull {
    fetch?: Fetch | FetchNotification;

    include?: Tree | TreeNotification;
}

export interface PullNotificationList extends FlatPull {
    fetch?: Fetch | FetchNotificationList;

    include?: Tree | TreeNotificationList;
}

export interface PullTaskAssignment extends FlatPull {
    fetch?: Fetch | FetchTaskAssignment;

    include?: Tree | TreeTaskAssignment;
}

export interface PullTaskList extends FlatPull {
    fetch?: Fetch | FetchTaskList;

    include?: Tree | TreeTaskList;
}

export interface PullUserGroup extends FlatPull {
    fetch?: Fetch | FetchUserGroup;

    include?: Tree | TreeUserGroup;
}
